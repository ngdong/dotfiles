# If you come from bash you might have to change your $PATH.
# Path to your oh-my-zsh installation.
  # Set default editor to nvim
  export EDITOR='nvim'
  # Enabled true color support for terminals
  export NVIM_TUI_ENABLE_TRUE_COLOR=1
  export ZSH=/home/${USER}/.oh-my-zsh
# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
  ZSH_THEME="spaceship"
  POWERLEVEL9K_PROMPT_ADD_NEWLINE=true
  ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=fg=250
# Automatically start tmux
  ZSH_TMUX_AUTOSTART=true
# Automatically connect to a previous session if it exists
  ZSH_TMUX_AUTOCONNECT=true
# Enable command auto-correction.
  ENABLE_CORRECTION="true"
# Display red dots whilst waiting for completion.
  COMPLETION_WAITING_DOTS="true"
# Disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
  DISABLE_UNTRACKED_FILES_DIRTY="true"

# Vi-mode
  VI_MODE_RESET_PROMPT_ON_MODE_CHANGE=true
  VI_MODE_SET_CURSOR=true
  MODE_INDICATOR="%F{yellow}+%f"

# Add wisely, as too many plugins slow down shell startup.
  plugins=(git zsh-autosuggestions zsh-syntax-highlighting tmux vi-mode zoxide docker)
  source $ZSH/oh-my-zsh.sh

# User configuration
# Bind autosuggest-accept
  bindkey '^n' autosuggest-accept

# Setting rg as the default source for fzf
export FZF_DEFAULT_COMMAND='rg --files'

# Apply the command to CTRL-T as well
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

## FZF FUNCTIONS ##

# fo [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fo() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# fh [FUZZY PATTERN] - Search in command history
fh() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

# fbr [FUZZY PATTERN] - Checkout specified branch
# Include remote branches, sorted by most recent commit and limited to 30
fgb() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# tm [SESSION_NAME | FUZZY PATTERN] - create new tmux session, or switch to existing one.
# Running `tm` will let you fuzzy-find a session mame
# Passing an argument to `ftm` will switch to that session if it exists or create it otherwise
ftm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# tm [SESSION_NAME | FUZZY PATTERN] - delete tmux session
# Running `tm` will let you fuzzy-find a session mame to delete
# Passing an argument to `ftm` will delete that session if it exists
ftmk() {
  if [ $1 ]; then
    tmux kill-session -t "$1"; return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux kill-session -t "$session" || echo "No session found to delete."
}

# fuzzy grep via rg and open in vim with line number
fgr() {
  local file
  local line

  read -r file line <<<"$(rg --no-heading --line-number $@ | fzf -0 -1 | awk -F: '{print $1, $2}')"

  if [[ -n $file ]]
  then
     vim $file +$line
  fi
}

# Propmt components
# Context
  DEFAULT_USER=$USER
  prompt_context() {}

# Aliases
  alias vim="nvim"
  alias top="vtop --theme=wizard"
  alias ls="colorls -lA --sd"
  alias clear_history='echo "" > ~/.zsh_history & exec $SHELL -l'
  alias rmvs="rm -rf .session.vim"

# Generated for envman. Do not edit.
[ -s "$HOME/.config/envman/load.sh" ] && source "$HOME/.config/envman/load.sh"

# fnm
export PATH=/home/$USER/.fnm:$PATH
eval "`fnm env`"

# Calling fnm use automatically in a directory with a .nvmrc file
FNM_USING_LOCAL_VERSION=0

autoload -U add-zsh-hook
_fnm_autoload_hook () {
  if [[ -f .nvmrc && -r .nvmrc || -f .node-version && -r .node-version ]]; then
    FNM_USING_LOCAL_VERSION=1
    fnm use --install-if-missing
  elif [ $FNM_USING_LOCAL_VERSION -eq 1 ]; then
    FNM_USING_LOCAL_VERSION=0
    fnm use default --install-if-missing
  fi
}

add-zsh-hook chpwd _fnm_autoload_hook \
    && _fnm_autoload_hook

# JDK
export JAVA_HOME=/usr/lib/jvm/jdk-16.0.2

# Android sdk
export ANDROID_HOME=$HOME/Android/Sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

# pnpm
export PNPM_HOME="/home/zed/.local/share/pnpm"
export PATH="$PNPM_HOME:$PATH"
# pnpm end
